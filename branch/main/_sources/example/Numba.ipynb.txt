{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "6ff55d32-480b-45d6-848e-2dff57b74a2a",
   "metadata": {},
   "source": [
    "## Step 0: Python: Benchmarking"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "13e6c7ca-942c-4c8b-8f59-e364b5d616b7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "def f(x):\n",
    "    return x ** 2 - x\n",
    "\n",
    "def integrate_f(a, b, N):\n",
    "    s = 0\n",
    "    dx = (b - a) / N\n",
    "    for i in range(N):\n",
    "        s += f(a + i * dx)\n",
    "    return s * dx\n",
    "\n",
    "def apply_integrate_f(col_a, col_b, col_N):\n",
    "    n = len(col_N)\n",
    "    res = np.empty(n,dtype=np.float64)\n",
    "    for i in range(n):\n",
    "        res[i] = integrate_f(col_a[i], col_b[i], col_N[i])\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "23f39c11-a65a-4b43-810b-860bd826266b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "df = pd.DataFrame({\"a\": np.random.randn(1000),\n",
    "                  \"b\": np.random.randn(1000),\n",
    "                  \"N\": np.random.randint(100, 1000, (1000))})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "35b6fc89-24ef-4a71-95c7-4c3f68a89aeb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "198 ms ± 4.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%timeit apply_integrate_f(df['a'], df['b'], df['N'])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "cc5f1c32-5f1c-4c3e-9e62-2eb61da175af",
   "metadata": {},
   "source": [
    "## Step 1: Numba: Adding @jit decorator for functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b471c613-b801-4cf6-bbc0-19cf1f844e75",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import numba\n",
    "\n",
    "@numba.jit\n",
    "def f_numba(x):\n",
    "    return x ** 2 - x\n",
    "\n",
    "@numba.jit\n",
    "def integrate_f_numba(a, b, N):\n",
    "    s = 0\n",
    "    dx = (b - a) / N\n",
    "    for i in range(N):\n",
    "        s += f_numba(a + i * dx)\n",
    "    return s * dx\n",
    "\n",
    "@numba.jit\n",
    "def apply_integrate_f_numba(col_a, col_b, col_N):\n",
    "    n = len(col_N)\n",
    "    res = np.empty(n,dtype=np.float64)\n",
    "    for i in range(n):\n",
    "        res[i] = integrate_f_numba(col_a[i], col_b[i], col_N[i])\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "aff1e076-4d93-4dac-88d9-000b3b360dec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "473 μs ± 16.1 μs per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"
     ]
    }
   ],
   "source": [
    "%timeit apply_integrate_f_numba(df['a'].to_numpy(),df['b'].to_numpy(),df['N'].to_numpy())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "edc28eeb-bcdf-4229-9cbc-b5efd6350d4a",
   "metadata": {},
   "source": [
    "## Step 2: Numba: Adding date type to @jit decorator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a1d5060d-717b-4c9d-a129-dd022e43b6c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import numba\n",
    "\n",
    "@numba.jit(numba.float64(numba.float64))\n",
    "def f_numba_dtype(x):\n",
    "    return x ** 2 - x\n",
    "\n",
    "@numba.jit(numba.float64(numba.float64,numba.float64,numba.int32))\n",
    "def integrate_f_numba_dtype(a, b, N):\n",
    "    s = 0\n",
    "    dx = (b - a) / N\n",
    "    for i in range(N):\n",
    "        s += f_numba_dtype(a + i * dx)\n",
    "    return s * dx\n",
    "\n",
    "@numba.jit(numba.float64[:](numba.float64[:],numba.float64[:],numba.int32[:]))\n",
    "def apply_integrate_f_numba_dtype(col_a, col_b, col_N):\n",
    "    n = len(col_N)\n",
    "    res = np.empty(n,dtype=np.float64)\n",
    "    for i in range(n):\n",
    "        res[i] = integrate_f_numba_dtype(col_a[i], col_b[i], col_N[i])\n",
    "    return res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "bebcccdb-7374-40a8-99cd-dafb4271b755",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "465 μs ± 454 ns per loop (mean ± std. dev. of 7 runs, 1,000 loops each)\n"
     ]
    }
   ],
   "source": [
    "%timeit apply_integrate_f_numba_dtype(df['a'].to_numpy(), df['b'].to_numpy(), df['N'].to_numpy())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
